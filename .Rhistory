SUM(CASE WHEN foster.sex = 'Male' THEN 1 ELSE 0 END) AS male_cases,
SUM(CASE WHEN foster.sex = 'Female' THEN 1 ELSE 0 END) AS female_cases,
AVG(foster.totalrem) AS average_num_removals,
SUM(CASE WHEN foster.everadpt = 'Yes, child has been legally adopted' THEN 1 ELSE 0 END) AS adopted_count,
SUM(CASE WHEN foster.agedout = 'Yes' THEN 1 ELSE 0 END) AS aged_out_count
FROM (SELECT RANK() OVER (
PARTITION BY fc.recnumbr, fc.st
ORDER BY fc.datayear DESC
) AS datayear_rank,
fc.sex,
fc.totalrem,
fc.everadpt,
fc.agedout
FROM [CA_ODS].[ndacan].[afcars_foster_care_00_13] AS fc
) AS foster
WHERE foster.datayear_rank = 1;"
query_NYTD_record_counts <-
"SELECT
COUNT(*) AS num_records,
COUNT(DISTINCT ow.recnumbr) AS num_cases,
SUM(CASE WHEN ow.cd_wave = 2 THEN 1 ELSE 0 END) AS num_wave2_candidates,
SUM(CASE
WHEN ow.cd_wave = 2
AND ow.responded = 'Responded to Survey'
THEN 1
ELSE 0
END) AS num_wave2_respondents
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow;"
query_NYTD_wave1_case_summaries <-
"SELECT
COUNT(*) AS total_records,
COUNT(DISTINCT ow.recnumbr) AS unique_cases,
SUM(CASE WHEN ow.sex = 'Male' THEN 1 ELSE 0 END) AS males,
SUM(CASE WHEN ow.sex = 'Female' THEN 1 ELSE 0 END) AS females
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow
WHERE ow.cd_wave = 1;"
query_NYTD_wave2_candidate_case_summaries <-
"SELECT
COUNT(*) AS total_records,
COUNT(DISTINCT ow.recnumbr) AS unique_cases,
SUM(CASE WHEN ow.sex = 'Male' THEN 1 ELSE 0 END) AS males,
SUM(CASE WHEN ow.sex = 'Female' THEN 1 ELSE 0 END) AS females
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow
WHERE ow.cd_wave = 2;"
query_NYTD_wave2_respondent_case_summaries <-
"SELECT
COUNT(*) AS total_records,
COUNT(DISTINCT ow.recnumbr) AS unique_cases,
SUM(CASE WHEN ow.sex = 'Male' THEN 1 ELSE 0 END) AS males,
SUM(CASE WHEN ow.sex = 'Female' THEN 1 ELSE 0 END) AS females
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow
WHERE ow.cd_wave = 2 AND ow.responded = 'Responded to Survey';"
connection <- odbcConnect("POC")
# run the follow-up queries
AFCARS_record_summaries1 <- sqlQuery(connection, query_AFCARS_record_counts,
stringsAsFactors = FALSE,
as.is = TRUE)
AFCARS_record_summaries2 <- sqlQuery(connection,
query_AFCARS_record_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
AFCARS_case_summaries <- sqlQuery(connection, query_AFCARS_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_record_summaries <- sqlQuery(connection, query_NYTD_record_counts,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_wave1_case_summaries <- sqlQuery(connection,
query_NYTD_wave1_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_wave2_candidate_case_summaries <-
sqlQuery(connection,
query_NYTD_wave2_candidate_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_wave2_respondent_case_summaries <-
sqlQuery(connection,
query_NYTD_wave2_respondent_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
# close the connection
close(connection)
# simplify the follow-up query results
AFCARS_record_summaries <- data.frame(AFCARS_record_summaries1,
AFCARS_record_summaries2,
stringsAsFactors = FALSE)
rm(AFCARS_record_summaries1,
AFCARS_record_summaries2)
NYTD_wave_summaries <- rbind(wave1 = NYTD_wave1_case_summaries,
wave2_candidates =
NYTD_wave2_candidate_case_summaries,
wave2_respondents =
NYTD_wave2_respondent_case_summaries)
rm(NYTD_wave1_case_summaries,
NYTD_wave2_candidate_case_summaries,
NYTD_wave2_respondent_case_summaries)
ls()
grep("^query", ls())
grep("^query", ls(), value = TRUE)
rm(grep("^query", ls(), value = TRUE))
grep("^query", ls(), value = TRUE)
rm(list = grep("^query", ls(), value = TRUE))
help(save)
save(AFCARS_NYTD_raw_data,
AFCARS_record_summaries,
AFCARS_case_summaries,
NYTD_record_summaries,
NYTD_wave_summaries,
file = raw_Rda_path)
load(raw_Rda_path)
AFCARS_case_summaries
AFCARS_record_summaries
NYTD_record_summaries
NYTD_wave_summaries
NYTD_wave_summaries$males / (NYTD_wave_summaries$males + NYTD_wave_summaries$females)
summary(AFCARS_NYTD_raw_data$agedout)
table(AFCARS_NYTD_raw_data$agedout)
test <- AFCARS_NYTD_raw_data
summary(test$ageadopt)
table(test$ageadopt)
table(test$ageatlatrem)
query_AFCARS_record_counts <-
"SELECT
COUNT(*) AS num_records,
COUNT(DISTINCT fc.recnumbr) AS num_cases
FROM [CA_ODS].[ndacan].[afcars_foster_care_00_13] AS fc;"
query_AFCARS_record_summaries <-
"SELECT
AVG(fc.record_counts) AS mean_records_per_case,
MIN(fc.record_counts) AS min_records_per_case,
MAX(fc.record_counts) AS max_records_per_case
FROM (SELECT COUNT(recnumbr) AS record_counts
FROM [CA_ODS].[ndacan].[afcars_foster_care_00_13]
GROUP BY recnumbr, st) AS fc;"
query_AFCARS_case_summaries <-
"SELECT
SUM(CASE WHEN foster.sex = 'Male' THEN 1 ELSE 0 END) AS male_cases,
SUM(CASE WHEN foster.sex = 'Female' THEN 1 ELSE 0 END) AS female_cases,
AVG(foster.totalrem) AS mean_num_removals,
SUM(CASE WHEN foster.everadpt = 'Yes, child has been legally adopted' THEN 1 ELSE 0 END) AS adopted_count,
SUM(CASE WHEN foster.agedout = 'Yes' THEN 1 ELSE 0 END) AS aged_out_count
FROM (SELECT RANK() OVER (
PARTITION BY fc.recnumbr, fc.st
ORDER BY fc.datayear DESC
) AS datayear_rank,
fc.sex,
fc.totalrem,
fc.everadpt,
fc.disreasn
FROM [CA_ODS].[ndacan].[afcars_foster_care_00_13] AS fc
) AS foster
WHERE foster.datayear_rank = 1;"
query_NYTD_record_counts <-
"SELECT
COUNT(*) AS num_records,
COUNT(DISTINCT ow.recnumbr) AS num_cases,
SUM(CASE WHEN ow.cd_wave = 2 THEN 1 ELSE 0 END) AS num_wave2_candidates,
SUM(CASE
WHEN ow.cd_wave = 2
AND ow.responded = 'Responded to Survey'
THEN 1
ELSE 0
END) AS num_wave2_respondents
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow;"
query_NYTD_wave1_case_summaries <-
"SELECT
COUNT(*) AS total_records,
COUNT(DISTINCT ow.recnumbr) AS unique_cases,
SUM(CASE WHEN ow.sex = 'Male' THEN 1 ELSE 0 END) AS males,
SUM(CASE WHEN ow.sex = 'Female' THEN 1 ELSE 0 END) AS females
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow
WHERE ow.cd_wave = 1;"
query_NYTD_wave2_candidate_case_summaries <-
"SELECT
COUNT(*) AS total_records,
COUNT(DISTINCT ow.recnumbr) AS unique_cases,
SUM(CASE WHEN ow.sex = 'Male' THEN 1 ELSE 0 END) AS males,
SUM(CASE WHEN ow.sex = 'Female' THEN 1 ELSE 0 END) AS females
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow
WHERE ow.cd_wave = 2;"
query_NYTD_wave2_respondent_case_summaries <-
"SELECT
COUNT(*) AS total_records,
COUNT(DISTINCT ow.recnumbr) AS unique_cases,
SUM(CASE WHEN ow.sex = 'Male' THEN 1 ELSE 0 END) AS males,
SUM(CASE WHEN ow.sex = 'Female' THEN 1 ELSE 0 END) AS females
FROM [CA_ODS].[ndacan].[nytd_outcomes_waves_1_2] AS ow
WHERE ow.cd_wave = 2 AND ow.responded = 'Responded to Survey';"
connection <- odbcConnect("POC")
query_AFCARS_case_summaries <-
"SELECT
SUM(CASE WHEN foster.sex = 'Male' THEN 1 ELSE 0 END) AS male_cases,
SUM(CASE WHEN foster.sex = 'Female' THEN 1 ELSE 0 END) AS female_cases,
AVG(foster.totalrem) AS mean_num_removals,
SUM(CASE WHEN foster.everadpt = 'Yes, child has been legally adopted' THEN 1 ELSE 0 END)
AS ever_adopted_count,
SUM(CASE WHEN foster.disreasn = 'Emancipation' THEN 1 ELSE 0 END) AS emancipation_count
FROM (SELECT RANK() OVER (
PARTITION BY fc.recnumbr, fc.st
ORDER BY fc.datayear DESC
) AS datayear_rank,
fc.sex,
fc.totalrem,
fc.everadpt,
fc.disreasn
FROM [CA_ODS].[ndacan].[afcars_foster_care_00_13] AS fc
) AS foster
WHERE foster.datayear_rank = 1;"
connection <- odbcConnect("POC")
AFCARS_record_summaries1 <- sqlQuery(connection, query_AFCARS_record_counts,
stringsAsFactors = FALSE,
as.is = TRUE)
AFCARS_record_summaries2 <- sqlQuery(connection,
query_AFCARS_record_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
AFCARS_case_summaries <- sqlQuery(connection, query_AFCARS_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_record_summaries <- sqlQuery(connection, query_NYTD_record_counts,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_wave1_case_summaries <- sqlQuery(connection,
query_NYTD_wave1_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_wave2_candidate_case_summaries <-
sqlQuery(connection,
query_NYTD_wave2_candidate_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
NYTD_wave2_respondent_case_summaries <-
sqlQuery(connection,
query_NYTD_wave2_respondent_case_summaries,
stringsAsFactors = FALSE,
as.is = TRUE)
# close the connection
close(connection)
AFCARS_case_summaries
rm(list = grep("^query", ls(), value = TRUE))
# simplify the follow-up query results
AFCARS_record_summaries <- data.frame(AFCARS_record_summaries1,
AFCARS_record_summaries2,
stringsAsFactors = FALSE)
rm(AFCARS_record_summaries1,
AFCARS_record_summaries2)
NYTD_wave_summaries <- rbind(wave1 = NYTD_wave1_case_summaries,
wave2_candidates =
NYTD_wave2_candidate_case_summaries,
wave2_respondents =
NYTD_wave2_respondent_case_summaries)
rm(NYTD_wave1_case_summaries,
NYTD_wave2_candidate_case_summaries,
NYTD_wave2_respondent_case_summaries)
# if the user requested an Rda, make one in the working directory
if(make_a_raw_Rda) {
save(AFCARS_NYTD_raw_data,
AFCARS_record_summaries,
AFCARS_case_summaries,
NYTD_record_summaries,
NYTD_wave_summaries,
file = raw_Rda_path)
}
table(test$disreasn)
AFCARS_case_summaries
AFCARS_record_summaries
AFCARS_case_summaries$emancipation_count / AFCARS_record_summaries$num_cases
4811 / nrow(test)
table(test$ageatlatrem)
test$st[test$ageatlatrem == 19,]
test$st[test$ageatlatrem == 19]
table(test$st[test$ageatlatrem == 19])
str(test)
length(test)
table(test$children)
table(test$incarc)
table(test$incarc, test$children)
chisq.test(table(test$incarc, test$children))
table(test$incarc, test$children) / nrow(test)
round(table(test$incarc, test$children) / nrow(test))
help(round)
round(table(test$incarc, test$children) / nrow(test), 2)
table(test$incarc, test$children)
temp <- table(test$incarc, test$children)
temp
temp[, "margin"] <- sum(temp[1:4])
temp
str(temp)
data.frame(temp)
rowsum(temp)
help(rowsum)
rowSums(temp)
temp / rowSums(temp)
round(temp / rowSums(temp), 2)
temp
str(test)
ggplot2(test, aes(x = totalrem)) + geom_histogram()
library(ggplot2)
ggplot(test, aes(x = totalrem)) + geom_histogram()
ggplot(test, aes(x = totalrem)) + geom_histogram(binwidth = 1)
ggplot(test, aes(x = totalrem, y = ..density..)) + geom_histogram(binwidth = 1)
as.character(puppy)
names(test)
predictor_candidates <- names(AFCARS_NYTD_raw_data)[, -c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob")]
predictor_candidates <- names(AFCARS_NYTD_raw_data)[-c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob"),
-70:87]
predictor_candidates <- names(AFCARS_NYTD_raw_data)[-70:87]
predictor_candidates <- names(AFCARS_NYTD_raw_data)[-c(70:87)]
predictor_candidates <- predictor_candidates(-c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob"))
predictor_candidates <- predictor_candidates[-c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob")]
predictor_candidates <- subset(predictor_candidates,
-c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob")
)
predictor_candidates <- subset(predictor_candidates,
select = -c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob")
)
help(subset)
predictor_candidates <- subset(predictor_candidates,
subset = -c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob")
)
predictor_candidates <- subset(AFCARS_NYTD_raw_data,
select = -c(70:87))
predictor_candidates <- subset(predictor_candidates,
select = -c("datayear_rank",
"stchid",
"recnumbr",
"st",
"dob",
"pd_dob")
)
predictor_candidates <- subset(predictor_candidates,
select = -c(datayear_rank,
stchid,
recnumbr,
st,
dob,
pd_dob))
predictor_candidates <- names(predictor_candidates)
predictor_candidates
test$sex
test$amiakn
table(test$amiakn)
predictor_candidates
help(bsModal)
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
install.packages("shinythemes")
library(shiny)
library(shinythemes)
shinyApp(
ui = navbarPage(
"The Case Outcome Simulator",
theme = shinytheme("united"),
# using COS to explore trends per predictor ("Explore Mode")
tabPanel("Explore Mode", fluidPage(
# define user tools in the first column
# width = 3 of 12 (Shiny divides the horizontal space up into 12 sections)
column(3,
wellPanel(
radioButtons("a", label = h4("Select X-Axis"),
choices = c("one", "two", "three")),
bsPopover("a",
title = "VD1",
content = "STUFF",
trigger = "click",
placement = "right"),
radioButtons("b", label = h4("Select X-Axis"),
choices = c("one", "two", "three")),
bsPopover("b",
title = "VD2",
content = "STUFF",
trigger = "hover",
placement = "right"),
sliderInput("c", label = h4("Select X-Axis"),
min = 0, max = 100, value = 50),
bsPopover("c",
title = "VD3",
content = "STUFF",
trigger = "click",
placement = "right"),
sliderInput("d", label = h4("Select X-Axis"),
min = 0, max = 100, value = 50),
bsPopover("d",
title = "VD4",
content = "STUFF",
trigger = "hover",
placement = "right")
)
),
column(9,
textOutput("return_stuff")
)
))
),
server = function(input, output, session) {
output$return_stuff <- renderText({input$"x_axis_choice"})
}
)
library(shiny)
library(shinythemes)
shinyApp(
ui = navbarPage(
"The Case Outcome Simulator",
#         theme = shinytheme("united"),
# using COS to explore trends per predictor ("Explore Mode")
tabPanel("Explore Mode", fluidPage(
# define user tools in the first column
# width = 3 of 12 (Shiny divides the horizontal space up into 12 sections)
column(3,
wellPanel(
actionLink("my_link", "Modal Testing Link!"),
bsModal("test_modal", "Does it work?", "my_link",
HTML("Here is some <strong>text</strong>.")),
radioButtons("a", label = h4("Select X-Axis"),
choices = c("one", "two", "three")),
bsPopover("a",
title = "VD1",
content = "STUFF",
trigger = "click",
placement = "right"),
radioButtons("b", label = h4("Select X-Axis"),
choices = c("one", "two", "three")),
bsPopover("b",
title = "VD2",
content = "STUFF",
trigger = "hover",
placement = "right"),
sliderInput("c", label = h4("Select X-Axis"),
min = 0, max = 100, value = 50),
bsPopover("c",
title = "VD3",
content = "STUFF",
trigger = "click",
placement = "right"),
sliderInput("d", label = h4("Select X-Axis"),
min = 0, max = 100, value = 50),
bsPopover("d",
title = "VD4",
content = "STUFF",
trigger = "hover",
placement = "right")
)
),
column(9,
textOutput("return_stuff")
)
))
),
server = function(input, output, session) {
output$return_stuff <- renderText({input$"x_axis_choice"})
}
)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('C:/Projects/COS')
help(shinythemes)
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
shiny::runApp('C:/Projects/COS')
